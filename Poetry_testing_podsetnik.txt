POETRY cheatsheet 

1. poetry new ime_projekta 		-> kako napraviti novi projekat 
2. cd ime_projekta 				-> sve komande moraju da se kucaju unutar projekta 
3. poetry init 					-> koristi se kada hocemo da instaliramo poetry u vec napravljenom projektu ili kad hocemo da napravimo samo pyproject.toml file
4. poetry add ime_necega 		-> Dodavanje biblioteka u pyproject.toml 
5. poetry shell 				-> Ulazi u poetry env 
	5.1. 	exit 					-> Komanda sa kojom izlazim iz env
	5.2. source $(poetry env info --path)/bin/activate		-> Rucno pokretanje env okruzenja
6. poetry install 				-> Instalira sav dependency iz poetry.lock fajla 
7. poetry update 				-> unapredice svaki dependency na najnoviju verziju 
8. 


pyproject.toml 					-> Sadrzi metapodatke projekta 
poetry.toml 					-> Sadrzi lokalnu konfiguraciju projekta 
poetry.lock 					-> Precizno navedene dependency-je koje se koriste 


-----------------------------------
pytest 

python -m pytest -v				-> pytest rekurzivno predje preko celog repozitorijuma i pokrece svaku funkciju koja ima rec test na pocetku

fixture 						-> Koristi se da inicijalizuje test u poznatom stanju :	predistable/repeatable 

------------------------------------

1. Dockerfile 					-> Napraviti Dockerfile 
								# Defines a base image for Docker container
								FROM python:3-alpine

								# Create app directory
								WORKDIR /flask-app

								# Copy the contents into the working directory
								ADD . /flask-app

								# run pip to install the dependencies to the flask app
								RUN pip install -r requirements.txt

								# Define the command to start the container
								CMD ["flask","run"]
	
2. docker image build -t ime-imagea-projekta .		-> Komanda koja napravi image dockera 

3. docker image ls 									-> Pregled da li se napravio image 

4. docker run -p 5000:5000 -d ime-imagea-projekta 	-> Komanda koja pokrece projekat 

5. docker stop dockerid 							-> Zaustavljanje dockera 

6. docker system prune 								-> Obrise sve 


---------------------------------
GIT podsetnik :

Master grana - Glavni fajl projekta, koja mora da radi u potpunosti
Branch 		 - Koren iz master grane (radne verzije projekta). 


- git init 					- Pravi git repozitorijum od fajla u kome se nalazi (.git)
- git add ime_fajla.py 		- Dodaje fajl u listu za commit .
	- git add . 			- Dodaj SVE fajlove na kojima postoje promene u listu za commit.
- git status 				- Prikazuje status grane u kojoj se nalazimo, kao i fajlove koje cekaju da budu commit-ovani.
- git commit -m "Poruka..."	- Salje sve fajlove koji cekaju da budu poslati. Salje na granu u kojoj se nalazimo. 


- git checkout -b new 		- Napravimo novu granu "new" i brebacimo se na nju. Tako da sve naredne promene koje izvrsimo, primenjuju se na tu granu a ne na master.
	- git checkout master 	- Prebacivanje na master granu 
- git merge master 			- Pod uslovom da se nalazimo u nekoj od grana, ova komanda spaja granu sa master granom (uradi sync)
